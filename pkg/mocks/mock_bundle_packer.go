// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bryanl/sheaf/pkg/sheaf (interfaces: BundlePacker)

// Package mocks is a generated GoMock package.
package mocks

import (
	sheaf "github.com/bryanl/sheaf/pkg/sheaf"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBundlePacker is a mock of BundlePacker interface
type MockBundlePacker struct {
	ctrl     *gomock.Controller
	recorder *MockBundlePackerMockRecorder
}

// MockBundlePackerMockRecorder is the mock recorder for MockBundlePacker
type MockBundlePackerMockRecorder struct {
	mock *MockBundlePacker
}

// NewMockBundlePacker creates a new mock instance
func NewMockBundlePacker(ctrl *gomock.Controller) *MockBundlePacker {
	mock := &MockBundlePacker{ctrl: ctrl}
	mock.recorder = &MockBundlePackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBundlePacker) EXPECT() *MockBundlePackerMockRecorder {
	return m.recorder
}

// Pack mocks base method
func (m *MockBundlePacker) Pack(arg0 sheaf.Bundle, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pack", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pack indicates an expected call of Pack
func (mr *MockBundlePackerMockRecorder) Pack(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pack", reflect.TypeOf((*MockBundlePacker)(nil).Pack), arg0, arg1, arg2)
}
