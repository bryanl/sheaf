// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bryanl/sheaf/pkg/sheaf (interfaces: BundleConfig)

// Package mocks is a generated GoMock package.
package mocks

import (
	sheaf "github.com/bryanl/sheaf/pkg/sheaf"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBundleConfig is a mock of BundleConfig interface
type MockBundleConfig struct {
	ctrl     *gomock.Controller
	recorder *MockBundleConfigMockRecorder
}

// MockBundleConfigMockRecorder is the mock recorder for MockBundleConfig
type MockBundleConfigMockRecorder struct {
	mock *MockBundleConfig
}

// NewMockBundleConfig creates a new mock instance
func NewMockBundleConfig(ctrl *gomock.Controller) *MockBundleConfig {
	mock := &MockBundleConfig{ctrl: ctrl}
	mock.recorder = &MockBundleConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBundleConfig) EXPECT() *MockBundleConfigMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockBundleConfig) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockBundleConfigMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockBundleConfig)(nil).GetName))
}

// GetSchemaVersion mocks base method
func (m *MockBundleConfig) GetSchemaVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSchemaVersion indicates an expected call of GetSchemaVersion
func (mr *MockBundleConfigMockRecorder) GetSchemaVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaVersion", reflect.TypeOf((*MockBundleConfig)(nil).GetSchemaVersion))
}

// GetUserDefinedImages mocks base method
func (m *MockBundleConfig) GetUserDefinedImages() []sheaf.UserDefinedImage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDefinedImages")
	ret0, _ := ret[0].([]sheaf.UserDefinedImage)
	return ret0
}

// GetUserDefinedImages indicates an expected call of GetUserDefinedImages
func (mr *MockBundleConfigMockRecorder) GetUserDefinedImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDefinedImages", reflect.TypeOf((*MockBundleConfig)(nil).GetUserDefinedImages))
}

// GetVersion mocks base method
func (m *MockBundleConfig) GetVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockBundleConfigMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockBundleConfig)(nil).GetVersion))
}

// SetName mocks base method
func (m *MockBundleConfig) SetName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", arg0)
}

// SetName indicates an expected call of SetName
func (mr *MockBundleConfigMockRecorder) SetName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockBundleConfig)(nil).SetName), arg0)
}

// SetSchemaVersion mocks base method
func (m *MockBundleConfig) SetSchemaVersion(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSchemaVersion", arg0)
}

// SetSchemaVersion indicates an expected call of SetSchemaVersion
func (mr *MockBundleConfigMockRecorder) SetSchemaVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSchemaVersion", reflect.TypeOf((*MockBundleConfig)(nil).SetSchemaVersion), arg0)
}

// SetUserDefinedImages mocks base method
func (m *MockBundleConfig) SetUserDefinedImages(arg0 []sheaf.UserDefinedImage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserDefinedImages", arg0)
}

// SetUserDefinedImages indicates an expected call of SetUserDefinedImages
func (mr *MockBundleConfigMockRecorder) SetUserDefinedImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserDefinedImages", reflect.TypeOf((*MockBundleConfig)(nil).SetUserDefinedImages), arg0)
}

// SetVersion mocks base method
func (m *MockBundleConfig) SetVersion(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVersion", arg0)
}

// SetVersion indicates an expected call of SetVersion
func (mr *MockBundleConfigMockRecorder) SetVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersion", reflect.TypeOf((*MockBundleConfig)(nil).SetVersion), arg0)
}
