// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bryanl/sheaf/pkg/sheaf (interfaces: BundleConfigCodec)

// Package mocks is a generated GoMock package.
package mocks

import (
	sheaf "github.com/bryanl/sheaf/pkg/sheaf"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockBundleConfigCodec is a mock of BundleConfigCodec interface
type MockBundleConfigCodec struct {
	ctrl     *gomock.Controller
	recorder *MockBundleConfigCodecMockRecorder
}

// MockBundleConfigCodecMockRecorder is the mock recorder for MockBundleConfigCodec
type MockBundleConfigCodecMockRecorder struct {
	mock *MockBundleConfigCodec
}

// NewMockBundleConfigCodec creates a new mock instance
func NewMockBundleConfigCodec(ctrl *gomock.Controller) *MockBundleConfigCodec {
	mock := &MockBundleConfigCodec{ctrl: ctrl}
	mock.recorder = &MockBundleConfigCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBundleConfigCodec) EXPECT() *MockBundleConfigCodecMockRecorder {
	return m.recorder
}

// Decode mocks base method
func (m *MockBundleConfigCodec) Decode(arg0 io.Reader) (sheaf.BundleConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].(sheaf.BundleConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode
func (mr *MockBundleConfigCodecMockRecorder) Decode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockBundleConfigCodec)(nil).Decode), arg0)
}

// Encode mocks base method
func (m *MockBundleConfigCodec) Encode(arg0 io.Writer, arg1 sheaf.BundleConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode
func (mr *MockBundleConfigCodecMockRecorder) Encode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockBundleConfigCodec)(nil).Encode), arg0, arg1)
}
