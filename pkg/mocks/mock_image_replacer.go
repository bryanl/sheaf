// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bryanl/sheaf/pkg/sheaf (interfaces: ImageReplacer)

// Package mocks is a generated GoMock package.
package mocks

import (
	sheaf "github.com/bryanl/sheaf/pkg/sheaf"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockImageReplacer is a mock of ImageReplacer interface
type MockImageReplacer struct {
	ctrl     *gomock.Controller
	recorder *MockImageReplacerMockRecorder
}

// MockImageReplacerMockRecorder is the mock recorder for MockImageReplacer
type MockImageReplacerMockRecorder struct {
	mock *MockImageReplacer
}

// NewMockImageReplacer creates a new mock instance
func NewMockImageReplacer(ctrl *gomock.Controller) *MockImageReplacer {
	mock := &MockImageReplacer{ctrl: ctrl}
	mock.recorder = &MockImageReplacerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageReplacer) EXPECT() *MockImageReplacerMockRecorder {
	return m.recorder
}

// Replace mocks base method
func (m *MockImageReplacer) Replace(arg0 sheaf.BundleManifest, arg1 sheaf.BundleConfig, arg2 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replace indicates an expected call of Replace
func (mr *MockImageReplacerMockRecorder) Replace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockImageReplacer)(nil).Replace), arg0, arg1, arg2)
}
