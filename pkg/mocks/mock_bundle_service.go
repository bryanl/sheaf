// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bryanl/sheaf/pkg/sheaf (interfaces: BundleService)

// Package mocks is a generated GoMock package.
package mocks

import (
	sheaf "github.com/bryanl/sheaf/pkg/sheaf"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBundleService is a mock of BundleService interface
type MockBundleService struct {
	ctrl     *gomock.Controller
	recorder *MockBundleServiceMockRecorder
}

// MockBundleServiceMockRecorder is the mock recorder for MockBundleService
type MockBundleServiceMockRecorder struct {
	mock *MockBundleService
}

// NewMockBundleService creates a new mock instance
func NewMockBundleService(ctrl *gomock.Controller) *MockBundleService {
	mock := &MockBundleService{ctrl: ctrl}
	mock.recorder = &MockBundleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBundleService) EXPECT() *MockBundleServiceMockRecorder {
	return m.recorder
}

// Artifacts mocks base method
func (m *MockBundleService) Artifacts() sheaf.ArtifactsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Artifacts")
	ret0, _ := ret[0].(sheaf.ArtifactsService)
	return ret0
}

// Artifacts indicates an expected call of Artifacts
func (mr *MockBundleServiceMockRecorder) Artifacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Artifacts", reflect.TypeOf((*MockBundleService)(nil).Artifacts))
}

// Codec mocks base method
func (m *MockBundleService) Codec() sheaf.Codec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Codec")
	ret0, _ := ret[0].(sheaf.Codec)
	return ret0
}

// Codec indicates an expected call of Codec
func (mr *MockBundleServiceMockRecorder) Codec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Codec", reflect.TypeOf((*MockBundleService)(nil).Codec))
}

// Config mocks base method
func (m *MockBundleService) Config() sheaf.BundleConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(sheaf.BundleConfig)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockBundleServiceMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockBundleService)(nil).Config))
}

// Path mocks base method
func (m *MockBundleService) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path
func (mr *MockBundleServiceMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockBundleService)(nil).Path))
}
