// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bryanl/sheaf/pkg/sheaf (interfaces: Bundle)

// Package mocks is a generated GoMock package.
package mocks

import (
	images "github.com/bryanl/sheaf/pkg/images"
	sheaf "github.com/bryanl/sheaf/pkg/sheaf"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBundle is a mock of Bundle interface
type MockBundle struct {
	ctrl     *gomock.Controller
	recorder *MockBundleMockRecorder
}

// MockBundleMockRecorder is the mock recorder for MockBundle
type MockBundleMockRecorder struct {
	mock *MockBundle
}

// NewMockBundle creates a new mock instance
func NewMockBundle(ctrl *gomock.Controller) *MockBundle {
	mock := &MockBundle{ctrl: ctrl}
	mock.recorder = &MockBundleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBundle) EXPECT() *MockBundleMockRecorder {
	return m.recorder
}

// Artifacts mocks base method
func (m *MockBundle) Artifacts() sheaf.ArtifactsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Artifacts")
	ret0, _ := ret[0].(sheaf.ArtifactsService)
	return ret0
}

// Artifacts indicates an expected call of Artifacts
func (mr *MockBundleMockRecorder) Artifacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Artifacts", reflect.TypeOf((*MockBundle)(nil).Artifacts))
}

// Codec mocks base method
func (m *MockBundle) Codec() sheaf.Codec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Codec")
	ret0, _ := ret[0].(sheaf.Codec)
	return ret0
}

// Codec indicates an expected call of Codec
func (mr *MockBundleMockRecorder) Codec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Codec", reflect.TypeOf((*MockBundle)(nil).Codec))
}

// Config mocks base method
func (m *MockBundle) Config() sheaf.BundleConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(sheaf.BundleConfig)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockBundleMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockBundle)(nil).Config))
}

// Images mocks base method
func (m *MockBundle) Images() (images.Set, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Images")
	ret0, _ := ret[0].(images.Set)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Images indicates an expected call of Images
func (mr *MockBundleMockRecorder) Images() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Images", reflect.TypeOf((*MockBundle)(nil).Images))
}

// Manifests mocks base method
func (m *MockBundle) Manifests() (sheaf.ManifestService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Manifests")
	ret0, _ := ret[0].(sheaf.ManifestService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Manifests indicates an expected call of Manifests
func (mr *MockBundleMockRecorder) Manifests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manifests", reflect.TypeOf((*MockBundle)(nil).Manifests))
}

// Path mocks base method
func (m *MockBundle) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path
func (mr *MockBundleMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockBundle)(nil).Path))
}
